<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".sql"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string prefijoDto = "Dto";
string baseClass = "Dto";

string inputFile = @"..\ModeloDatos.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
    string namespaceName = "AppGest.Datos.Persistencia"; //code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Creación del Archivo
// fileManager.StartNewFile("EB.Vistas Sql.sql");

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);


// Entidades del archivo EDMF
foreach (AssociationType asoc in ItemCollection.GetItems<AssociationType>().OrderBy(e => e.Name))
{
#>


asoc.Name = <#= asoc.Name #>
<#
    Describir(asoc.GetType());
    PushIndent(CodeRegion.GetIndent(1));
#>

asoc.RelationshipEndMembers

<#
    PushIndent(CodeRegion.GetIndent(1));
    foreach (RelationshipEndMember relMember in asoc.RelationshipEndMembers)
    {
#>

relMember.Name = <#= relMember.Name #>
<#
        Describir(relMember.GetType());
    
    }
    PopIndent();
    PopIndent();

}

EndNamespace(namespaceName);
fileManager.Process();

#>


<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void Describir(Type tipo)
{
#>
TIPO: <#= tipo.FullName #>
<#+
    PushIndent(CodeRegion.GetIndent(1));
    foreach (PropertyInfo pi in tipo.GetProperties())
    {
#>
<#= pi.Name #> = <#= pi.PropertyType #>
<#+
    }
    PopIndent();
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
