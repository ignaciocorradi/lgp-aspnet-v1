<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string prefijoDto = "Dto";
string baseClass = "Dto";

string inputFile = @"..\ModeloDatos.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
    string namespaceName = "AppGest.Datos.Persistencia"; //code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Creación del Archivo
fileManager.StartNewFile("EB.Constantes.cs");

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);


// Entidades del archivo EDMF
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        string clase = code.Escape(entity);
        string cBase = entity.BaseType != null ? code.Escape(" : " + entity.BaseType.Name) : "";
#>
public partial class <#=clase#><#=cBase#>
{

<#

        List<string> atributos= new List<string>();
        foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.DeclaringType == entity))
        {
            string atributo= code.Escape(edmProperty);
            atributos.Add("\"" + atributo + "\"\r\n          ");
            #>
    public const string PROP_<#=atributo.ToUpper().Replace("_", "")#> = "<#=atributo#>";
<#
        }
#>

    protected <#=cBase == "" ? "virtual" : "override" #> IList<string> ObtenerPropiedadesEntidad()
    {
        return new List<string>() {
            <#= string.Join(", ", atributos.ToArray()) #>}<#= cBase != "" ? ".Union(base.ObtenerPropiedadesEntidad()).ToList()": "" #>;
    }
}


<#

    }

EndNamespace(namespaceName);
fileManager.Process();

#>


<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Data.Objects.DataClasses;
using System.Linq;

<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
